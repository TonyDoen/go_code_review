package facade

/**
 *
 * 门面模式没有一个一般化的类图描述，最好的描述方法实际上就是以一个例子说明。
 * 由于门面模式的结构图过于抽象，因此把它稍稍具体点。
 * 假设子系统内有三个模块，分别是ModuleA、ModuleB和ModuleC，它们分别有一个示例方法，那么此时示例的整体结构图如下：
 *
 *                              ___________________
 *                             |        Facade     |
 *                             |-------------------|
 *                             |___________________|
 *                             |+test(): void      |
 *                             |___________________|
 *                               /        |       \
 *                              /         |        \
 *   __________________________/__________|_________\_______________________________
 *  |SubSystem                /           |          \                              |
 *  |                        /            |           \                             |
 *  |        ______________ /       ______|_______     \     ______________         |
 *  |       |  ModuleA     |       |  ModuleB     |     \   |  ModuleB     |        |
 *  |       |--------------|       |--------------|      \  |--------------|        |
 *  |       |______________|       |______________|       \ |______________|        |
 *  |       |+testA(): void|       |+testB(): void|        \|+testB(): void|        |
 *  |       |______________|       |______________|         |______________|        |
 *  |                                                                               |
 *  |                                                                               |
 *  |_______________________________________________________________________________|
 *
 *
 *  门面模式(外观模式)（Facade Pattern）
 *
 *  门面模式角色划分
 *  1. 门面(Facade)角色:      客户端可以调用这个角色的方法。此角色知晓相关的（一个或者多个）子系统的功能和责任。在正常情况下，本角色会将所有从客户端发来的请求委派到相应的子系统去。
 *  2. 子系统(SubSystem)角色: 可以同时有一个或者多个子系统。每个子系统都不是一个单独的类，而是一个类的集合（如上面的子系统就是由ModuleA、ModuleB、ModuleC三个类组合而成）。每个子系统都可以被客户端直接调用，或者被门面角色调用。子系统并不知道门面的存在，对于子系统而言，门面仅仅是另外一个客户端而已。
 *
 *  门面模式的注意点：
 *  1. 使用门面模式还有一个附带的好处，就是能够有选择性地暴露方法。一个模块中定义的方法可以分成两部分，一部分是给子系统外部使用的，一部分是子系统内部模块之间相互调用时使用的。有了Facade类，那么用于子系统内部模块之间相互调用的方法就不用暴露给子系统外部了。
 *  2. 一个系统可以有几个门面类。在门面模式中，通常只需要一个门面类，并且此门面类只有一个实例，换言之它是一个单例类。当然这并不意味着在整个系统里只有一个门面类，而仅仅是说对每一个子系统只有一个门面类。或者说，如果一个系统有好几个子系统的话，每一个子系统都有一个门面类，整个系统可以有数个门面类。
 *  3. 不能为子系统增加新行为。初学者往往以为通过继承一个门面类便可在子系统中加入新的行为，这是错误的。门面模式的用意是为子系统提供一个集中化和简化的沟通管道，而不能向子系统加入新的行为。比如医院中的接待员并不是医护人员，接待员并不能为病人提供医疗服务。
 *
 *  门面模式的优点：
 *  1. 松散耦合。 门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。
 *  2. 简单易用。 门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。
 *  3. 更好的划分访问层次。 通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。
 *
 *
 */

// 1. 门面(Facade)角色
type Facade struct {
}

func (f *Facade)test()  {
	a := &ModuleA{}
	a.TestA()

	b := &ModuleB{}
	b.TestB()

	c := &ModuleC{}
	c.TestC()
}

// 2. 子系统(SubSystem)角色
type ModuleA struct {
}

func (m *ModuleA)TestA()  {
	println("ModuleA TestA")
}

func (m *ModuleA)testA123()  {
	println("ModuleA testA123")
}

type ModuleB struct {
}

func (m *ModuleB)TestB()  {
	println("ModuleB TestB")
}

type ModuleC struct {
}

func (m *ModuleC)TestC()  {
	println("ModuleC TestC")
}


